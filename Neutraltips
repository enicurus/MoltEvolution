

moltOrganizer<-function(hackettTree,matrix){
	treePF<-hackettTree
	treePA<-hackettTree
	treeStaffel<-hackettTree
	treeSimul<-hackettTree
	PFmissing<-as.vector(matrix$Species[matrix$PF=="-"])
	PAmissing<-as.vector(matrix$Species[matrix$PA=="-"])
	Staffelmissing<-as.vector(matrix$Species[matrix$Staffel=="-"])
	Simulmissing<-as.vector(matrix$Species[matrix$Simul=="-"])
	treePF<-drop.tip(treePF,PFmissing)
	treePA<-drop.tip(treePA,PAmissing)
	treeStaffel<-drop.tip(treeStaffel,Staffelmissing)
	treeSimul<-drop.tip(treeSimul,Simulmissing)
	PF<-(matrix$PF)
	PF<-as.vector(PF)
	names(PF)<-matrix$Species
	PF<-(PF[PF!="-"])
	PA<-(matrix$PA)
	PA<-as.vector(PA)
	names(PA)<-matrix$Species
	PA<-(PA[PA!="-"])
	Staffel<-(matrix$Staffel)
	Staffel<-as.vector(Staffel)
	names(Staffel)<-matrix$Species
	Staffel<-(Staffel[Staffel!="-"])
	Simul<-(matrix$Simul)
	Simul<-as.vector(Simul)
	names(Simul)<-matrix$Species
	Simul<-(Simul[Simul!="-"])
	out<-list()
	out$PF<-PF
	out$treePF<-treePF
	out$PA<-PA
	out$treePA<-treePA
	out$Staffel<-Staffel
	out$treeStaffel<-treeStaffel
	out$Simul<-Simul
	out$treeSimul<-treeSimul
	return(out)
	}

neutralTips<-function(tree,states){
	require(phytools)
	varMultiplier<-function(states){
		state<-matrix(nrow=length(states),ncol=((length(states))*2)-1)
		for (i in 1:(length(states)*2)-1)
		state[,i]<-states
		return(state)
		}
	matrix<-varMultiplier(states)
	matrixMaker<-function(vector){
		out<-to.matrix(vector,seq=0:1)
		return(out)
		}
	listMatrixMaker<-function(matrix,states){
		matrixList<-list()
		for(i in 1:length(matrix[1,])){
			matrixName<-paste("matrix",i,sep="_")
			matrixList[[matrixName]]<-(as.vector(matrix[,i]))
			names(matrixList[[matrixName]])<-names(states)
			matrixList[[matrixName]]<-matrixMaker(matrixList[[matrixName]])
			}
		return(matrixList)
		}
	matrix<-listMatrixMaker(matrix,states)
	JonSnow<-function(matrix){
		for (i in 1:length(matrix))
			matrix[[i]][i,]<-rep(0.5,2)
		return(matrix)
		}
	matrix<-JonSnow(matrix)
	multiSimmap<-function(tree,matrix){
		simmapList<-list()
		for(i in 1:length(matrix)){
			cat("Calculating 100 stochastic maps for tree",i,"of",length(matrix),"\n")
			simmapName<-paste("simmap",i,sep="_")
			x=matrix[[i]]
			simmapList[[simmapName]]<-make.simmap(tree,x,nsim=100)
							}
		return(simmapList)
		}	
	maps<-multiSimmap(tree,matrix)
	multiDescribeMap<-function(maps){
		describeList<-list()
		cat("Integrating over 100 maps for each tree",length(maps),"\n")
		for(i in 1:length(maps)){
			cat("=")
			listName<-paste("describe",i,sep="_")
			describeList[[listName]]<-describe.simmap(maps[[i]],plot=FALSE)
							}
			return(describeList)
		}
	describeMaps<-multiDescribeMap(maps)
	predictedTipMaker<-function(describeMaps,states){
		out<-list()
		for(i in 1:length(describeMaps)){
			outnames<-names(states)
			out[i]<-describeMaps[[i]]$tips[i,2]
			}
		out<-matrix(out)
		rownames(out)<-rownames(describeMaps[[1]]$tips)	
		out<-cbind(out,as.numeric(states))
		proportion<-as.numeric(1-(abs(as.numeric(out[,2])-(as.numeric(out[,1])))))
		out<-cbind(out,as.numeric(proportion))
		colnames(out)<-c("expected","observed","probBrown") 
		return(out)
		}
	outMatrix<-predictedTipMaker(describeMaps,states)
	print("Time is an illusion. Lunchtime, doubly so -- Douglas Adams")
	return(outMatrix)

}	





neutralNodes<-function(tree,states){
	require(phytools)
	require(geiger)
	varMultiplier<-function(states){
		state<-matrix(nrow=length(states),ncol=((length(states)*2)-1))
		for (i in 1:((length(states)*2)-1))
		state[,i]<-states
		return(state)
		}
	matrix<-varMultiplier(states)
	matrixMaker<-function(vector){
		out<-to.matrix(vector,seq=0:1)
		return(out)
		}
	nodeListMatrixMaker<-function(matrix,tips){
	matrixList<-list()
 		for(i in 1:(length(matrix[1,]))){
			matrixName<-paste("node",i,sep="_")
 			matrixList[[matrixName]]<-(as.vector(matrix[,1]))
 			names(matrixList[[matrixName]])<-names(tips)
 			matrixList[[matrixName]]<-matrixMaker(matrixList[[matrixName]])
 	
 			}
 			return(matrixList)
 		 }	
  	nodeList<-nodeListMatrixMaker(matrix,states)
	node_forget<-function(tree,matrixLists){
	require(geiger)
	tipList<-list()
	tipNumbers<-list()
	for (i in 1:(length(matrixLists)-1)){
		tiplistname<-paste("node",i,sep="_")
		tipList[[tiplistname]]<-tips(tree,i)
		names<-as.vector(row.names(matrixLists[[1]]))
			for (j in 1:length(tipList[[i]])){
				tipNumbers[[tiplistname]][j]<-which(names==tipList[[i]][j])
					for(k in tipNumbers[[i]]){
					matrixLists[[i]][k,]<-rep(0.5,2)
					}
				}
			}
	return(matrixLists)
	}
	matrix<-node_forget(tree,nodeList)
	multiSimmap<-function(tree,matrix){
		simmapList<-list()
		for(i in 1:length(matrix)){
			cat("Calculating 100 stochastic maps for tree",i,"of",length(matrix),"\n")
			simmapName<-paste("simmap",i,sep="_")
			x=matrix[[i]]
			simmapList[[simmapName]]<-make.simmap(tree,matrix[[i]],nsim=100)
							}
		return(simmapList)
		}	
	maps<-multiSimmap(tree,matrix)
	multiDescribeMap<-function(maps){
		describeList<-list()
		cat("Integrating over 100 maps for",length(maps),"trees","\n")
		for(i in 1:length(maps)){
			cat("=")
			listName<-paste("describe",i,sep="_")
			describeList[[listName]]<-describe.simmap(maps[[i]],plot=FALSE)
							}
			return(describeList)
		}
	describeMaps<-multiDescribeMap(maps)
	Mapoutput<-function(describeMaps,states,tree){
		out<-list()
		outList<-list()
		tips<-list()
		stateSimmap<-make.simmap(tree,states,nsim=100)
		stateDescribeMap<-describe.simmap(stateSimmap)
		for(j in 1:length(states)){
			tipnames<-names(states)[j]
			outList[[tipnames]]<-(1-(abs(states[j]-describeMaps[[j]]$tips[j,2])))
			}
		for(i in length(states):length(describeMaps)){
			nodenames<-paste("node",i,sep="_")
			outList[[nodenames]]<-(1-(abs(describeMaps[[i]]$ace[i,2]-stateDescribeMap$ace[i,2])))
			tips[[nodenames]]<-tips(treePF,i)
			}
		out$probs<-outList
		out$tips<-tips
		out$sigtips<-tips[outList<=0.05]
		out$sigs<-outlist[outlist<=0.05]
		cat("If you try and take a cat apart to see how it works, the first thing you have on your hands is a nonworking cat. --Douglas Adams")
		return(out)	
		}
	done<-Mapoutput(describeMaps,states,tree)		
	return(done)	

}	
			
